[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Applied Data Science Course 1",
    "section": "",
    "text": "This course will introduce the learner to the basics of the python programming environment, including fundamental python programming techniques such as lambdas, reading and manipulating csv files, and the numpy library. The course will introduce data manipulation and cleaning techniques using the popular python pandas data science library and introduce the abstraction of the Series and DataFrame as the central data structures for data analysis, along with tutorials on how to use functions such as groupby, merge, and pivot tables effectively. By the end of this course, students will be able to take tabular data, clean it, manipulate it, and run basic inferential statistical analyses."
  },
  {
    "objectID": "code/1_intro.html",
    "href": "code/1_intro.html",
    "title": "2  Introduction into python",
    "section": "",
    "text": "The syntax for writing a function in python. add_numbers is a function that takes two numbers and adds them together.\n\ndef add_numbers(x, y):\n    return x + y\n\nadd_numbers(1,2)\n\n3\n\n\nWe can easily change this to take 3 arguments instead of 2. we can also make the 3rd parameter optional.\nAll of the optional parameters, the ones that you got default values for, need to come at the end of the function declaration. It also means that you can pass an optional parameters as labeled values.\n\ndef add_numbers(x, y, z=None):\n    if z == None:\n        return x + y\n    else:\n        return x + y + z\n\nprint(add_numbers(1,2))\nprint(add_numbers(1,2,3))\n\n3\n6\n\n\nadd_numbers updated to take an optional flag parameter.\n\ndef add_numbers(x, y, z=None, flag=False):\n    if (flag):\n        print('Flag is true!')\n    if (z == None):\n        return x + y\n    else:\n        return x + y + z\n\n\nprint(add_numbers(1, 2, flag=True))\n\nFlag is true!\n3\n\n\nWe can use this for functions to add different modes of operation, i.e. we can add versus subtract:\n\ndef do_math(a, b, kind=None):\n  if (kind=='add'):\n    return a+b\n  else:\n    return a-b\n\ndo_math(1, 2, kind='add')\n\n3\n\n\nWe can also assign function add_numbers to variable a.\n\ndef add_numbers(x, y):\n    return x + y\n\n\na = add_numbers\na(1, 2)\n\n3"
  },
  {
    "objectID": "code/1_intro.html#python-types-and-sequences",
    "href": "code/1_intro.html#python-types-and-sequences",
    "title": "2  Introduction into python",
    "section": "2.2 Python Types and Sequences",
    "text": "2.2 Python Types and Sequences\nWe identify the type of a variable using the type() function:\n\ntype(add_numbers)\n\nfunction\n\n\n\n2.2.1 Tuples\nTuples are an immutable data structure (cannot be altered). We write tuples using parentheses and we can mix types within a tuple.\n\nx = (1, 'a', 2, 'b')\ntype(x)\n\ntuple\n\n\n\n\n2.2.2 Lists\nLists are a mutable data structure. A list is declared using a squared bracket.\n\nx = [1, 'a', 2, 'b']\ntype(x)\n\nlist\n\n\nWe can change the contents of a list, for example using the append function, which appends new items to the end of a list\n\nx.append(3.3)\nx\n\n[1, 'a', 2, 'b', 3.3]\n\n\n\n\n2.2.3 For loops\nBoth list and tuples are iterable types, so we can write loops to go through every value they hold.\n\nfor item in x:\n    print(item)\n\nprint('')\n\n1\na\n2\nb\n3.3\n\n\n\n\n\n2.2.4 Arrays\nLists and tuples can also be accessed as arrays by using the square bracket operator, which is called the indexing operator.\nThe first item of the list starts at position zero and to get the length of the list, we use the built in len function.\n\ni = 0\n\nwhile (i != len(x)):\n    print(x[i])\n    i = i + 1\n\nprint('')\n\n1\na\n2\nb\n3.3\n\n\n\n\n\n2.2.5 Concatenate lists\n\n[1, 2] + [3, 4]\n\n[1, 2, 3, 4]\n\n\n\n\n2.2.6 Repeat values in a list\n\n[1,2] * 3\n\n[1, 2, 1, 2, 1, 2]\n\n\n\n\n2.2.7 The in operator\nWe use the in operator to check if something is inside a list.\n\n1 in [1,2,3]\n\nTrue\n\n\n\n1 in [0,4,5]\n\nFalse\n\n\n\n\n2.2.8 Slicing\nIn Python, the indexing operator allows you to submit multiple values.\nThe first parameter is the starting location, if this is the only element then one item is return from the list.\nThe second parameter is the end of the slice. It’s an exclusive end so if you slice with the first parameter being zero the next parameter being one, then you only get back one item.\n\nx = 'This is a string'\nprint(x[0])  #first character\nprint(x[0:1])  #first character, but we have explicitly set the end character\nprint(x[0:2])  #first two characters\n\nT\nT\nTh\n\n\nOur index values can also be negative to index from the back of the string.\n\nx[-1]\n\n'g'\n\n\n\n#all characters from the 4th last to the second last\nx[-4:-2]\n\n'ri'\n\n\nStart at the first and going until the 3rd:\n\nx[:3]\n\n'Thi'\n\n\nStart with the fourth character and go to the end of the list\n\nx[4:]\n\n' is a string'\n\n\n\n\n2.2.9 Strings\nA lot of the operations we have done before, we can also do on strings\n\nfirstname = 'Christopher'\nlastname = 'Brooks'\n\n#concatenate two strings\nprint(firstname + ' ' + lastname)\n\n#repeat strings\nprint(firstname *2)\n\n#search for strings\nprint('Chris' in firstname)\n\nChristopher Brooks\nChristopherChristopher\nTrue\n\n\nBefore concatenating strings, we have to make sure to convert objects to strings. i.e. this does not work\n'Chris' + 2\nbut this does:\n\n'Chris' + str(2)\n\n'Chris2'\n\n\n\n\n2.2.10 Split\nsplit breaks up a string and returns a list of all the words in a string, or a list split on a specific character.\nBelow, we split up the string based on the presence of a space character resulting in a list of four elements. We can then use an index operator to choose parts of the list:\n\n# [0] selects the first element of the list\nfirstname = 'Christopher Arthur Hansen Brooks'.split(' ')[0]  \n\n# [-1] selects the last element of the list\nlastname = 'Christopher Arthur Hansen Brooks'.split(' ')[-1]  \n\nprint(firstname)\nprint(lastname)\n\nChristopher\nBrooks"
  },
  {
    "objectID": "code/1_intro.html#dictionaries",
    "href": "code/1_intro.html#dictionaries",
    "title": "2  Introduction into python",
    "section": "2.3 Dictionaries",
    "text": "2.3 Dictionaries\nDictionaries are similar to lists and tuples in that they hold a collection of items, but they’re labeled collections which do not have an ordering. This means that for each value you insert into the dictionary, you must also give a key to get that value out. A dictionary is denoted by curly brackets.\nWe indicate each item of the dictionary when creating it using a pair of values separated by colons.\nWe can retrieve a value for a given label using the indexing operator.\n\nx = {'Christopher Brooks': 'brooksch@umich.edu', 'Bill Gates': 'billg@microsoft.com'}\n\n# Retrieve a value by using the indexing operator\nx['Christopher Brooks']  \n\n'brooksch@umich.edu'\n\n\nWe can also add new items to the dictionary:\n\nx['Kevin Thompson'] = None\nx\n\n{'Christopher Brooks': 'brooksch@umich.edu',\n 'Bill Gates': 'billg@microsoft.com',\n 'Kevin Thompson': None}\n\n\n\n#access the values\nx.values()\n\ndict_values(['brooksch@umich.edu', 'billg@microsoft.com', None])\n\n\n\n#access the key:value pairs\nx.items()\n\ndict_items([('Christopher Brooks', 'brooksch@umich.edu'), ('Bill Gates', 'billg@microsoft.com'), ('Kevin Thompson', None)])\n\n\nWe can iterate through the items in a dictionary, i.e. we can iterate over all the keys:\n\nfor name in x:\n    print(x[name])\n\nprint('')\n\nbrooksch@umich.edu\nbillg@microsoft.com\nNone\n\n\n\nIterate over all the values:\n\nfor email in x.values():\n    print(email)\n\nprint('')    \n\nbrooksch@umich.edu\nbillg@microsoft.com\nNone\n\n\n\nWe can also iterate over all the keys and items in a dictionary:\n\nfor name, email in x.items():\n    print(name)\n    print(email)\n\nprint('')\n\nChristopher Brooks\nbrooksch@umich.edu\nBill Gates\nbillg@microsoft.com\nKevin Thompson\nNone\n\n\n\n\n2.3.1 Unpacking\nIn Python you can have a sequence. That’s a list or a tuple of values, and you can unpack those items into different variables through assignment in one statement.\n\nx = ('Christopher', 'Brooks', 'brooksch@umich.edu')\nfname, lname, email = x\n\nprint(fname)\nprint(lname)\nprint(x)\n\nChristopher\nBrooks\n('Christopher', 'Brooks', 'brooksch@umich.edu')\n\n\nMake sure the number of values you are unpacking matches the number of variables being assigned. I.e. the code below would give an error:\nx = ('Christopher', 'Brooks', 'brooksch@umich.edu', 'Ann Arbor')\nfname, lname, email = x"
  },
  {
    "objectID": "code/1_intro.html#python-more-on-strings",
    "href": "code/1_intro.html#python-more-on-strings",
    "title": "2  Introduction into python",
    "section": "2.4 Python More on Strings",
    "text": "2.4 Python More on Strings\nThe Python string formatting mini language allows you to write a string statement indicating placeholders for variables to be evaluated. You then pass these variables in either named or in order arguments, and Python handles the string manipulation for you.\nWe can write a sales statement string which includes these items using curly brackets.\nWe can then call the format method on that string and pass in the values that we want substituted as appropriate.\n\nsales_record = {\n    'price': 3.24,\n    'num_items': 4,\n    'person': 'Chris'}\n\nsales_statement = '{} bought {} item(s) at a price of {} each for a total of {}'\n\nprint(sales_statement.format(sales_record['person'],\nsales_record['num_items'],\nsales_record['price'],\nsales_record['num_items'] * sales_record['price']))\n\nChris bought 4 item(s) at a price of 3.24 each for a total of 12.96"
  },
  {
    "objectID": "code/1_intro.html#reading-and-writing-csv-files",
    "href": "code/1_intro.html#reading-and-writing-csv-files",
    "title": "2  Introduction into python",
    "section": "2.5 Reading and Writing CSV files",
    "text": "2.5 Reading and Writing CSV files\nLet’s import our datafile ../data/mpg.csv, which contains fuel economy data for 234 cars, using the csv module.\n\nmpg : miles per gallon\nclass : car classification\ncty : city mpg\ncyl : # of cylinders\ndispl : engine displacement in liters\ndrv : f = front-wheel drive, r = rear wheel drive, 4 = 4wd\nfl : fuel (e = ethanol E85, d = diesel, r = regular, p = premium, c = CNG)\nhwy : highway mpg\nmanufacturer : automobile manufacturer\nmodel : model of car\ntrans : type of transmission\nyear : model year\n\n\nimport csv\n\n\nwith open('../data/mpg.csv') as csvfile:\n    #read in data as a dictionary\n    mpg = list(csv.DictReader(csvfile))\n\nmpg[:3]\n\n[OrderedDict([('', '1'),\n              ('manufacturer', 'audi'),\n              ('model', 'a4'),\n              ('displ', '1.8'),\n              ('year', '1999'),\n              ('cyl', '4'),\n              ('trans', 'auto(l5)'),\n              ('drv', 'f'),\n              ('cty', '18'),\n              ('hwy', '29'),\n              ('fl', 'p'),\n              ('class', 'compact')]),\n OrderedDict([('', '2'),\n              ('manufacturer', 'audi'),\n              ('model', 'a4'),\n              ('displ', '1.8'),\n              ('year', '1999'),\n              ('cyl', '4'),\n              ('trans', 'manual(m5)'),\n              ('drv', 'f'),\n              ('cty', '21'),\n              ('hwy', '29'),\n              ('fl', 'p'),\n              ('class', 'compact')]),\n OrderedDict([('', '3'),\n              ('manufacturer', 'audi'),\n              ('model', 'a4'),\n              ('displ', '2'),\n              ('year', '2008'),\n              ('cyl', '4'),\n              ('trans', 'manual(m6)'),\n              ('drv', 'f'),\n              ('cty', '20'),\n              ('hwy', '31'),\n              ('fl', 'p'),\n              ('class', 'compact')])]\n\n\n\n#print the length of our list\nlen(mpg)\n\n234\n\n\nThe length of our list is 234, meaning we have a dictionary for each of the 234 cars in the CSV file.\n\n#print column names\nmpg[0].keys()\n\nodict_keys(['', 'manufacturer', 'model', 'displ', 'year', 'cyl', 'trans', 'drv', 'cty', 'hwy', 'fl', 'class'])\n\n\nFind the average cty fuel economy across all cars. All values in the dictionaries are strings, so we need to convert to float.\n\nsum(float(d['cty']) for d in mpg) / len(mpg)\n\n16.858974358974358\n\n\nFind the average city MPG grouped by the number of cylinders a car has.\nWe use set to return the unique values for the number of cylinders the cars in our dataset have.\n\ncylinders = set(d['cyl'] for d in mpg)\ncylinders\n\n{'4', '5', '6', '8'}\n\n\n\n#create empty list to store our calculations\nCtyMpgByCyl = []\n\n#iterate over all cylinder levels and then over all dics\nfor c in cylinders:\n    summpg = 0\n    cyltypecount = 0\n    #iterate over dics\n    for d in mpg:\n        #if the cylinder type matches add the cty mpg and increment the count\n        if d['cyl'] == c:\n            summpg += float(d['cty'])\n            cyltypecount += 1\n    # append the tuple ('cylinder', 'avg mpg')\n    CtyMpgByCyl.append((c, summpg/cyltypecount))\n\n#sort the list (lambda will be covered a bit later)\nCtyMpgByCyl.sort(key=lambda x: x[0])\nCtyMpgByCyl\n\n[('4', 21.012345679012345),\n ('5', 20.5),\n ('6', 16.21518987341772),\n ('8', 12.571428571428571)]\n\n\nNext, lets find the average highway MPG for the different vehicle classes.\n\n#find the different vehicle classes\nvehicleclass = set(d['class'] for d in mpg)\nvehicleclass\n\n{'2seater', 'compact', 'midsize', 'minivan', 'pickup', 'subcompact', 'suv'}\n\n\n\nHwyMpgByClass = []\n\nfor t in vehicleclass:\n    summpg = 0\n    vclasscount = 0\n    for d in mpg:\n        if d['class'] == t:\n            summpg += float(d['hwy'])\n            vclasscount += 1\n    HwyMpgByClass.append((t, summpg/vclasscount))\n\nHwyMpgByClass.sort(key=lambda x : x[1])\nHwyMpgByClass\n\n[('pickup', 16.87878787878788),\n ('suv', 18.129032258064516),\n ('minivan', 22.363636363636363),\n ('2seater', 24.8),\n ('midsize', 27.29268292682927),\n ('subcompact', 28.142857142857142),\n ('compact', 28.29787234042553)]"
  },
  {
    "objectID": "code/1_intro.html#dates-and-times",
    "href": "code/1_intro.html#dates-and-times",
    "title": "2  Introduction into python",
    "section": "2.6 Dates and Times",
    "text": "2.6 Dates and Times\nOne of the most common legacy methods for storing the date and time in online transactions systems is based on the offset from the epoch, which is January 1, 1970.\nIn Python, you can get the current time since the epoch using the time module. You can then create a time stamp using the from time stamp function on the date time object. When we print this value out, we see that the year, month, day, and so forth are also printed out.\n\nimport datetime as dt\nimport time as tm\n\ntime returns the current time in seconds since the Epoch. (January 1st, 1970)\n\ntm.time()\n\n1671458686.8570611\n\n\nCreate a timestamp:\n\ndtnow = dt.datetime.fromtimestamp(tm.time())\ndtnow\n\ndatetime.datetime(2022, 12, 19, 15, 4, 46, 864421)\n\n\nThe date time object has handy attributes to get the representative hour, day, seconds, etc.\n\n# get year, month, day, etc.from a datetime\ndtnow.year, dtnow.month, dtnow.day, dtnow.hour, dtnow.minute, dtnow.second  \n\n(2022, 12, 19, 15, 4, 46)\n\n\nDate time objects allow for simple math using time deltas. For instance, here, we can create a time delta of 100 days, then do subtraction and comparisons with the date time object.\n\n#create a timedelta of 100 days\ndelta = dt.timedelta(days = 100)\ndelta\n\ndatetime.timedelta(days=100)\n\n\n\n#return the current local date\ntoday = dt.date.today()\ntoday\n\ndatetime.date(2022, 12, 19)\n\n\n\n#extract the data 100 days ago\ntoday - delta\n\ndatetime.date(2022, 9, 10)\n\n\n\n#compare dates\ntoday > today - delta\n\nTrue"
  },
  {
    "objectID": "code/1_intro.html#objects-and-map",
    "href": "code/1_intro.html#objects-and-map",
    "title": "2  Introduction into python",
    "section": "2.7 Objects and map()",
    "text": "2.7 Objects and map()\nWe can define a class using the class keyword.\nClasses in Python are generally named using camel case, which means the first character of each word is capitalized.\nClass variables can also be declared. These are just variables which are shared across all instances. So in this example, we’re saying that the default for all people is at the school of information.\nTo define a method, you just write it as you would have a function. The one change, is that to have access to the instance, which a method is being invoked upon, you must include self, in the method signature. Similarly, if you want to refer to instance variables set on the object, you prepend them with the word self, with a full stop.\nIn this definition of a person, for instance, we have written two methods. Set name and set location. And both change instance bound variables, called name and location respectively\n\nclass Person:\n    #set a class variable\n    department = 'School of Information'\n    \n    #define a method\n    def set_name(self, new_name):\n        self.name = new_name\n    \n    def set_location(self, new_location):\n        self.location = new_location\n    \nperson = Person()\nperson.set_name('Chris Vrooks')\nperson.set_location('Mi, USA')\n\nprint('{} lives in {} and works in the department {}'. format(person.name,\nperson.location, person.department))\n\nChris Vrooks lives in Mi, USA and works in the department School of Information\n\n\nThere are a couple of implications of object-oriented programming in Python:\n\nObjects in Python do not have private or protected members. If you instantiate an object, you have full access to any of the methods or attributes of that object\nThere’s no need for an explicit constructor when creating objects in Python. You can add a constructor if you want to by declaring the __init__ method\n\nThe map function is one of the basis for functional programming in Python, it executes a specified function for each item in an iterable.\nFunctional programming is a programming paradigm in which you explicitly declare all parameters which could change through execution of a given function. Thus functional programming is referred to as being side-effect free, because there is a software contract that describes what can actually change by calling a function.\nThe map built-in function is one example of a functional programming feature of Python, that ties together a number of aspects of the language.\nThe map function signature looks like this: - The first parameters of function that you want executed - The second parameter, and every following parameter, is something which can be iterated upon\nImagine we have two list of numbers, maybe prices from two different stores on exactly the same items. And we wanted to find the minimum that we would have to pay if we bought the cheaper item between the two stores. To do this, we could iterate through each list, comparing items and choosing the cheapest. With map, we can do this comparison in a single statement.\n\nstore1 = [10.00, 11.00, 12.34, 2.34]\nstore2 = [9.00, 11.10, 12.34, 2.01]\n\ncheapest = map(min, store1, store2)\ncheapest\n\n<map at 0x7fae68fef490>\n\n\nWhen we go to print out the map, we see that we get an odd reference value instead of a list of items that we’re expecting. This is called lazy evaluation. In Python, the map function returns to you a map object. It doesn’t actually try and run the function min on two items, until you look inside for a value. This allows us to have very efficient memory management, even though something might be computationally complex.\nMaps are iterable, just like lists and tuples, so we can use a for loop to look at all of the values in the map.\n\nfor item in cheapest:\n    print(item)\n\nprint('')\n\n9.0\n11.0\n12.34\n2.01\n\n\n\nQuestion:\nHere is a list of faculty teaching this MOOC. Can you write a function and apply it using map() to get a list of all faculty titles and last names (e.g. [‘Dr. Brooks’, ‘Dr. Collins-Thompson’, …]) ?\n\npeople = ['Dr. Christopher Brooks', 'Dr. Kevyn Collins-Thompson', 'Dr. VG Vinod Vydiswaran', 'Dr. Daniel Romero']\n\ndef split_title_and_name(person):\n    title = person.split()[0]\n    lastname = person.split()[-1]\n    return '{} {}'.format(title, lastname)\n\nlist(map(split_title_and_name, people))\n\n['Dr. Brooks', 'Dr. Collins-Thompson', 'Dr. Vydiswaran', 'Dr. Romero']"
  },
  {
    "objectID": "code/1_intro.html#advanced-python-lambda-and-list-comprehensions",
    "href": "code/1_intro.html#advanced-python-lambda-and-list-comprehensions",
    "title": "2  Introduction into python",
    "section": "2.8 Advanced Python Lambda and List Comprehensions",
    "text": "2.8 Advanced Python Lambda and List Comprehensions\nLambda’s are Python’s way of creating anonymous functions. These are the same as other functions, but they have no name. The intent is that they’re simple or short lived and it’s easier just to write out the function in one line instead of going to the trouble of creating a named function.\nYou declare a lambda function with the word lambda followed by a list of arguments, followed by a colon and then a single expression. This is key: There’s only one expression to be evaluated in a lambda. The expression value is returned on execution of the lambda.\n\nmy_function = lambda a,b,c: a + b\n\nThe return of a lambda is a function reference. So in the case above, we would execute my_function and pass in three different parameters.\n\nmy_function(4,5,6)\n\n9\n\n\nNote that you can’t have default values for lambda parameters and you can’t have complex logic inside of the lambda itself because you’re limited to a single expression. Therefore, lambdas are more limited than full function definitions.\nAnother example, in which we add 10 to argument a, and return the result:\n\nx = lambda a : a + 10\nprint(x(5))\n\n15\n\n\nYou can apply the function above to an argument by surrounding the function and its argument with parentheses:\n\n(lambda x: x + 1)(5)\n\n6\n\n\nBecause a lambda function is an expression, it can be named. Therefore you could write the previous code as follows:\n\nadd_one = lambda x: x + 1\nadd_one(5)\n\n6\n\n\nExercise\nConvert the code below into a lambda:\n\npeople = ['Dr. Christopher Brooks', 'Dr. Kevyn Collins-Thompson', 'Dr. VG Vinod Vydiswaran', 'Dr. Daniel Romero']\n\ndef split_title_and_name(person):\n    return person.split()[0] + ' ' + person.split()[-1]\n\nlist(map(split_title_and_name, people))\n\n['Dr. Brooks', 'Dr. Collins-Thompson', 'Dr. Vydiswaran', 'Dr. Romero']\n\n\n\n#option 1\nfor person in people:\n    print((lambda x: x.split()[0] + ' ' + x.split()[-1])(person))\n\nprint('')\n\nDr. Brooks\nDr. Collins-Thompson\nDr. Vydiswaran\nDr. Romero\n\n\n\n\n#option 2\nlist(map(lambda person: person.split()[0] + ' ' + person.split()[-1], people))\n\n['Dr. Brooks', 'Dr. Collins-Thompson', 'Dr. Vydiswaran', 'Dr. Romero']\n\n\n\n2.8.1 List comprehensions\nWe’ve learned a lot about sequences and in Python. Tuples, lists, dictionaries and so forth.\nSequences are structures that we can iterate over, and often we create these through loops or by reading in data from a file.\nPython has built in support for creating these collections using a more abbreviated syntax called list comprehensions. The basic syntax looks as follows:\nnewlist = [expression for item in iterable if condition == True]\nLet’s start with how we usually write for loops:\n\nmy_list = []\n\nfor number in range(0,100):\n    #check for evenly dividing numbers\n    if number % 2 == 0:\n        my_list.append(number)\n\nmy_list\n\n[0,\n 2,\n 4,\n 6,\n 8,\n 10,\n 12,\n 14,\n 16,\n 18,\n 20,\n 22,\n 24,\n 26,\n 28,\n 30,\n 32,\n 34,\n 36,\n 38,\n 40,\n 42,\n 44,\n 46,\n 48,\n 50,\n 52,\n 54,\n 56,\n 58,\n 60,\n 62,\n 64,\n 66,\n 68,\n 70,\n 72,\n 74,\n 76,\n 78,\n 80,\n 82,\n 84,\n 86,\n 88,\n 90,\n 92,\n 94,\n 96,\n 98]\n\n\nWe can do the same with a list comprehension. We start the list comprehension with the value we want in the list. In this case, it’s a number. Then we put it in the for-loop, and then finally, we add any condition clauses.\n\nmy_list = [number for number in range(0,100) if number % 2 == 0]\nmy_list\n\n[0,\n 2,\n 4,\n 6,\n 8,\n 10,\n 12,\n 14,\n 16,\n 18,\n 20,\n 22,\n 24,\n 26,\n 28,\n 30,\n 32,\n 34,\n 36,\n 38,\n 40,\n 42,\n 44,\n 46,\n 48,\n 50,\n 52,\n 54,\n 56,\n 58,\n 60,\n 62,\n 64,\n 66,\n 68,\n 70,\n 72,\n 74,\n 76,\n 78,\n 80,\n 82,\n 84,\n 86,\n 88,\n 90,\n 92,\n 94,\n 96,\n 98]\n\n\nAnother example:\n\nfruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\n\nnewlist = [x for x in fruits if \"a\" in x]\n\nprint(newlist)\n\n['apple', 'banana', 'mango']\n\n\nNotice, that the if statement is optional:\n\nnewlist = [x for x in fruits]\nnewlist\n\n['apple', 'banana', 'cherry', 'kiwi', 'mango']\n\n\nThe expression is the current item in the iteration, but it is also the outcome, which you can manipulate before it ends up like a list item in the new list:\n\nnewlist = [x.upper() for x in fruits]\nnewlist\n\n['APPLE', 'BANANA', 'CHERRY', 'KIWI', 'MANGO']\n\n\nThe expression can also contain conditions, not like a filter, but as a way to manipulate the outcome:\n\nnewlist = [x if x != \"banana\" else \"orange\" for x in fruits]\nnewlist\n\n['apple', 'orange', 'cherry', 'kiwi', 'mango']\n\n\nExercise:\nThe function to convert:\n\ndef times_tables():\n    lst = []\n    for i in range(10):\n        for j in range (10):\n            lst.append(i*j)\n    return lst\n\nThe list comprehension:\n\ntimes_tables() == [i*j for i in range(10) for j in range(10)]\n\nTrue\n\n\nQuestion\nMany organizations have user ids which are constrained in some way. Imagine you work at an internet service provider and the user ids are all two letters followed by two numbers (e.g. aa49). Your task at such an organization might be to hold a record on the billing activity for each possible user.\nWrite an initialization line as a single list comprehension which creates a list of all possible user ids. Assume the letters are all lower case.\n\n#lowercase = 'abcdefghijklmnopqrstuvwxyz'\n#digits = '0123456789'\n\nmy_list = []\nlowercase = 'ab'\ndigits = '01'\n\nmy_list = [a+b+c+d for a in lowercase for b in lowercase for c in digits for d in digits]\n\nmy_list[0:4]\n\n['aa00', 'aa01', 'aa10', 'aa11']\n\n\n\nlen(my_list)\n\n16\n\n\nanswer = [???] correct_answer == answer ```"
  }
]